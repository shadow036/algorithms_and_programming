Algorithms and programming
Laboratory number 11
--------------------


Exercise 01 (A-F)
----------------

The graph library
lab11-GraphLibrary
provides all main graph library features, such as:
- graph load (from file)
- Depth First Search (DFS)
- BFS (Breadth First Search)
- etc.

The file content is the following one:
* client.c
  calls the library functions to verify their behavior
* graph.h, graph.c
  define the data structure to store the
  undirected or directed, unweighted or weighted
  graph and all manipulation functions.
* queuePublic.h, queuePrivate.h, queue.c
  implement a FIFO queue library, used within the breadth-first
  visit
* util.c, util.h
  implement some library utility functions (dynamic memory
  allocation, file opening, etc.)

The format of the input file is the following:

numberOfVertices c
vertex1A vertex1B weight
vertex2A vertex2B weight
...

where
- c is 0
  for undirected graph
- c is 1
  for directed
- vertex1A vertex1B
  indicates the edge (vertex1A, vertex1B)
- weights can be present of absent

For more details, see the teacher's overhead
- u14s01-representations
- u14s02-visits
and input files inX.txt for graph examples.

The client receives a file name on the command line and it performs
some graph statistics, followed by a BFS and a DFS.

First of all, compile and understand the library described above,
and run it on the input files inX.txt.

Afterward, extend the library by writing a new source (.c) file
containing the following functions (type of functions and parameters
are free):

A. graph_bfs_count
   this is a copy of the BFS function which evaluates and returns
   the number of visited vertices in the graph.

B. graph_dfs_distance
   this is a copy of the BFS function which evaluates the highest
   distance of a node from the source vertex.
   In other words, this function evaluates the number of steps
   to reach, from the source node, the farthest vertex.

C. graph_dfs_type
   a copy of the DFS function, which performs the same operations of
   the DFS function, but in addition it evaluates and it returns the
   number of Tree edges, Forward edges, Backward edges and
   Cross edges encountered during the visit.

D. graph_dfs_depth
   a copy of the DFS function, which performs the same operations of
   the DFS function, but in addition it evaluates and it returns the
   depth of the DFS visit tree.

E and F.
   graph_dfs_r_max_path
   a copy of the DFS function, which considers the graph as directed
   and weighted and it computes the length of the longest path
   starting at the source node and visiting each node of the graph
   at most once.
   The length of a path is defined as the sum of its edges.
   Write two versions of this function:
   - the first one works on generic graphs (with cycles).
   - the second one (simplified) works only on acyclic (and
     weighted) graphs.

